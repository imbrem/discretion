import Discretion.AddMonoidalCategory.Basic

namespace CategoryTheory

open MonoidalCategory

open Monoidal

open Limits

variable {C : Type _} [Category C]

abbrev IsBinaryCoproduct {X Y P : C} (inl : X ‚ü∂ P) (inr : Y ‚ü∂ P)
  := IsColimit (BinaryCofan.mk (X := X) (Y := Y) inl inr)

abbrev IsBinaryCoproduct.desc {W X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W) : P ‚ü∂ W
  := IsColimit.desc coprod (BinaryCofan.mk f g)

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inl_desc {W X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inl ‚â´ coprod.desc f g = f
  := coprod.fac (BinaryCofan.mk f g) ‚ü®WalkingPair.left‚ü©

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inr_desc {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inr ‚â´ coprod.desc f g = g
  := coprod.fac (BinaryCofan.mk f g) ‚ü®WalkingPair.right‚ü©

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.desc_inl_inr {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  : coprod.desc inl inr = ùüô P
  := coprod.desc_self

theorem IsBinaryCoproduct.desc_comp {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W) (h : W ‚ü∂ Z)
  : coprod.desc f g ‚â´ h = coprod.desc (f ‚â´ h) (g ‚â´ h)
  := by
  convert coprod.uniq (BinaryCofan.mk (f ‚â´ h) (g ‚â´ h)) (coprod.desc f g ‚â´ h) _
  simp
  intro ‚ü®j‚ü©; cases j <;> simp

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.desc_inl_inr_comp {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : P ‚ü∂ Z)
  : coprod.desc (inl ‚â´ f) (inr ‚â´ f) = f := by simp [<-desc_comp]

theorem IsBinaryCoproduct.eq_cases
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (f g : P ‚ü∂ Z)
  (hl : inl ‚â´ f = inl ‚â´ g)
  (hr : inr ‚â´ f = inr ‚â´ g)
  : f = g
  := by rw [<-coprod.desc_inl_inr_comp f, <-coprod.desc_inl_inr_comp g, hl, hr]

def IsBinaryCoproduct.map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') : P ‚ü∂ P'
  := IsColimit.map coprod (BinaryCofan.mk inl' inr') (mapPair f g)

theorem IsBinaryCoproduct.map_eq_desc
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : coprod.map inl' inr' f g = coprod.desc (f ‚â´ inl') (g ‚â´ inr') := by
  simp only [
    map, IsColimit.map, desc, Cocones.precompose, BinaryCofan.mk, mapPair, CategoryStruct.comp,
    NatTrans.vcomp
  ]
  congr
  funext x; cases x with | mk x => cases x <;> rfl

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inl_map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : inl ‚â´ coprod.map inl' inr' f g = f ‚â´ inl'
  := by rw [IsBinaryCoproduct.map_eq_desc]; simp

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inr_map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : inr ‚â´ coprod.map inl' inr' f g = g ‚â´ inr'
  := by rw [IsBinaryCoproduct.map_eq_desc]; simp

abbrev IsBinaryCoproduct.codiag {X : C} (inl : X ‚ü∂ P) (inr : X ‚ü∂ P)
  (coprod : IsBinaryCoproduct inl inr)
  := coprod.desc (ùüô X) (ùüô X)

def IsBinaryCoproduct.associator
  {X Y PXY : C} {inl_xy : X ‚ü∂ PXY} {inr_xy : Y ‚ü∂ PXY}
  {Z PYZ : C} {inl_yz : Y ‚ü∂ PYZ} {inr_yz : Z ‚ü∂ PYZ}
  {PXY_Z : C} {inl_xy_z : PXY ‚ü∂ PXY_Z} {inr_xy_z : Z ‚ü∂ PXY_Z}
  {PX_YZ : C} {inl_x_yz : X ‚ü∂ PX_YZ} {inr_x_yz : PYZ ‚ü∂ PX_YZ}
  (coprod_xy : IsBinaryCoproduct inl_xy inr_xy)
  (coprod_yz : IsBinaryCoproduct inl_yz inr_yz)
  (coprod_xy_z : IsBinaryCoproduct inl_xy_z inr_xy_z)
  (coprod_x_yz : IsBinaryCoproduct inl_x_yz inr_x_yz)
  : PXY_Z ‚âÖ PX_YZ
  := ‚ü®
    coprod_xy_z.desc (coprod_xy.desc inl_x_yz (inl_yz ‚â´ inr_x_yz)) (inr_yz ‚â´ inr_x_yz),
    coprod_x_yz.desc (inl_xy ‚â´ inl_xy_z) (coprod_yz.desc (inr_xy ‚â´ inl_xy_z) inr_xy_z),
    by simp [desc_comp],
    by simp [desc_comp]
  ‚ü©

def IsBinaryCoproduct.leftUnitor
  {I X P : C} {inl : I ‚ü∂ P} {inr : X ‚ü∂ P}
  (initial : IsInitial I)
  (coprod : IsBinaryCoproduct inl inr)
  : P ‚âÖ X
  := ‚ü®
    coprod.desc (initial.to X) (ùüô X),
    inr,
    by apply coprod.eq_cases <;> simp; apply initial.hom_ext,
    by simp
  ‚ü©

def IsBinaryCoproduct.rightUnitor
  {X I P : C} {inl : X ‚ü∂ P} {inr : I ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (initial : IsInitial I)
  : P ‚âÖ X
  := ‚ü®
    coprod.desc (ùüô X) (initial.to X),
    inl,
    by apply coprod.eq_cases <;> simp; apply initial.hom_ext,
    by simp
  ‚ü©

def IsBinaryCoproduct.braiding
  {X Y P : C}
  {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {inl' : Y ‚ü∂ Q} {inr' : X ‚ü∂ Q}
  (coprod : IsBinaryCoproduct inl inr)
  (coprod' : IsBinaryCoproduct inl' inr')
  : P ‚âÖ Q
  := ‚ü®
    coprod.desc inr' inl',
    coprod'.desc inr inl,
    by simp [desc_comp],
    by simp [desc_comp]
  ‚ü©

class ChosenCoproducts (C : Type _) [Category C] extends AddMonoidalCategory C where
  inl : ‚àÄ {X Y : C}, X ‚ü∂ X +‚Çí Y
  inr : ‚àÄ {X Y : C}, Y ‚ü∂ X +‚Çí Y
  coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr
  initial : IsInitial (ùüò_ C)
  assoc_canonical {X Y Z : C} : Œ±‚Å∫ X Y Z = coprod.associator coprod coprod coprod
  leftUnitor_canonical {X : C} : Œª‚Å∫ X = coprod.leftUnitor initial
  rightUnitor_canonical {X : C} : œÅ‚Å∫ X = coprod.rightUnitor initial
  braiding_canonical {X Y : C} : œÉ‚Å∫ X Y = coprod.braiding coprod

-- def monoidalOfBinaryCoproducts
--   (addObj : C ‚Üí C ‚Üí C)
--   (initialObj : C)
--   (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
--   (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
--   (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
--   (initial : IsInitial initialObj)
--   : MonoidalCategory C where
--   tensorObj := addObj
--   tensorUnit := initialObj
--   tensorHom := coprod.map inl inr
--   whiskerLeft Z X Y f := coprod.map inl inr (ùüô Z) f
--   whiskerRight f Z := coprod.map inl inr f (ùüô Z)
--   associator _ _ _ := coprod.associator coprod coprod coprod
--   leftUnitor _ := coprod.leftUnitor initial
--   rightUnitor _ := coprod.rightUnitor initial
--   tensorHom_def _ _ := sorry
--   tensor_id := sorry
--   tensor_comp := sorry
--   whiskerLeft_id := sorry
--   id_whiskerRight := sorry
--   associator_naturality := sorry
--   leftUnitor_naturality := sorry
--   rightUnitor_naturality := sorry
--   pentagon := sorry
--   triangle := sorry

-- def symmetricOfBinaryCoproducts
--   (addObj : C ‚Üí C ‚Üí C)
--   (initialObj : C)
--   (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
--   (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
--   (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
--   (initial : IsInitial initialObj) :
--     let _ := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial;
--     SymmetricCategory C
--   := let _ := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial; {
--     braiding := Œª _ _ => coprod.braiding coprod
--     braiding_naturality_right := sorry
--     braiding_naturality_left := sorry
--     hexagon_forward := sorry
--     hexagon_reverse := sorry
--     symmetry := sorry
--   }

-- def ChosenCoproducts.mk'
--   (addObj : C ‚Üí C ‚Üí C)
--   (initialObj : C)
--   (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
--   (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
--   (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
--   (initial : IsInitial initialObj) : ChosenCoproducts C where
--   addMonoidal := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial
--   addSymmetric := symmetricOfBinaryCoproducts addObj initialObj inl inr coprod initial
--   inl := inl
--   inr := inr
--   coprod := coprod
--   initial := initial
