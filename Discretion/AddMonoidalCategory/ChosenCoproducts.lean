import Discretion.AddMonoidalCategory.Basic

namespace CategoryTheory

open MonoidalCategory

open Monoidal

open Limits

variable {C : Type _} [Category C]

abbrev IsBinaryCoproduct {X Y P : C} (inl : X ‚ü∂ P) (inr : Y ‚ü∂ P)
  := IsColimit (BinaryCofan.mk (X := X) (Y := Y) inl inr)

abbrev IsBinaryCoproduct.desc {W X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W) : P ‚ü∂ W
  := IsColimit.desc coprod (BinaryCofan.mk f g)

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inl_desc {W X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inl ‚â´ coprod.desc f g = f
  := coprod.fac (BinaryCofan.mk f g) ‚ü®WalkingPair.left‚ü©

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inr_desc {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inr ‚â´ coprod.desc f g = g
  := coprod.fac (BinaryCofan.mk f g) ‚ü®WalkingPair.right‚ü©

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.desc_inl_inr {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  : coprod.desc inl inr = ùüô P
  := coprod.desc_self

theorem IsBinaryCoproduct.desc_comp {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : X ‚ü∂ W) (g : Y ‚ü∂ W) (h : W ‚ü∂ Z)
  : coprod.desc f g ‚â´ h = coprod.desc (f ‚â´ h) (g ‚â´ h)
  := by
  convert coprod.uniq (BinaryCofan.mk (f ‚â´ h) (g ‚â´ h)) (coprod.desc f g ‚â´ h) _
  simp
  intro ‚ü®j‚ü©; cases j <;> simp

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.desc_inl_inr_comp {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr) (f : P ‚ü∂ Z)
  : coprod.desc (inl ‚â´ f) (inr ‚â´ f) = f := by simp [<-desc_comp]

theorem IsBinaryCoproduct.eq_cases
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (f g : P ‚ü∂ Z)
  (hl : inl ‚â´ f = inl ‚â´ g)
  (hr : inr ‚â´ f = inr ‚â´ g)
  : f = g
  := by rw [<-coprod.desc_inl_inr_comp f, <-coprod.desc_inl_inr_comp g, hl, hr]

def IsBinaryCoproduct.map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') : P ‚ü∂ P'
  := IsColimit.map coprod (BinaryCofan.mk inl' inr') (mapPair f g)

theorem IsBinaryCoproduct.map_eq_desc
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : coprod.map inl' inr' f g = coprod.desc (f ‚â´ inl') (g ‚â´ inr') := by
  simp only [
    map, IsColimit.map, desc, Cocones.precompose, BinaryCofan.mk, mapPair, CategoryStruct.comp,
    NatTrans.vcomp
  ]
  congr
  funext x; cases x with | mk x => cases x <;> rfl

theorem IsBinaryCoproduct.map_comp
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  {X' Y' P' : C} {inl' : X' ‚ü∂ P'} {inr' : Y' ‚ü∂ P'}
  (coprod' : IsBinaryCoproduct inl' inr')
  {X'' Y'' P'' : C}
  (inl'' : X'' ‚ü∂ P'') (inr'' : Y'' ‚ü∂ P'')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  (f' : X' ‚ü∂ X'') (g' : Y' ‚ü∂ Y'')
  : coprod.map inl' inr' f g ‚â´ coprod'.map inl'' inr'' f' g'
  = coprod.map inl'' inr'' (f ‚â´ f') (g ‚â´ g')
  := by simp [map_eq_desc, desc_comp]

theorem IsBinaryCoproduct.map_comp_desc
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  {X' Y' P' : C} {inl' : X' ‚ü∂ P'} {inr' : Y' ‚ü∂ P'}
  (coprod' : IsBinaryCoproduct inl' inr')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  (f' : X' ‚ü∂ Z) (g' : Y' ‚ü∂ Z)
  : coprod.map inl' inr' f g ‚â´ coprod'.desc f' g' = coprod.desc (f ‚â´ f') (g ‚â´ g')
  := by simp [map_eq_desc, desc_comp]

@[simp]
theorem IsBinaryCoproduct.map_id'
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X ‚ü∂ P') (inr' : Y ‚ü∂ P')
  : coprod.map inl' inr' (ùüô X) (ùüô Y) = coprod.desc inl' inr'
  := by simp [map_eq_desc]

theorem IsBinaryCoproduct.map_id
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  : coprod.map inl inr (ùüô X) (ùüô Y) = ùüô P
  := by simp

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inl_map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : inl ‚â´ coprod.map inl' inr' f g = f ‚â´ inl'
  := by rw [IsBinaryCoproduct.map_eq_desc]; simp

@[simp, reassoc (attr := simp)]
theorem IsBinaryCoproduct.inr_map
  {X Y P : C} {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {X' Y' P' : C}
  (coprod : IsBinaryCoproduct inl inr)
  (inl' : X' ‚ü∂ P') (inr' : Y' ‚ü∂ P')
  (f : X ‚ü∂ X') (g : Y ‚ü∂ Y')
  : inr ‚â´ coprod.map inl' inr' f g = g ‚â´ inr'
  := by rw [IsBinaryCoproduct.map_eq_desc]; simp

abbrev IsBinaryCoproduct.codiag {X : C} (inl : X ‚ü∂ P) (inr : X ‚ü∂ P)
  (coprod : IsBinaryCoproduct inl inr)
  := coprod.desc (ùüô X) (ùüô X)

def IsBinaryCoproduct.associator
  {X Y PXY : C} {inl_xy : X ‚ü∂ PXY} {inr_xy : Y ‚ü∂ PXY}
  {Z PYZ : C} {inl_yz : Y ‚ü∂ PYZ} {inr_yz : Z ‚ü∂ PYZ}
  {PXY_Z : C} {inl_xy_z : PXY ‚ü∂ PXY_Z} {inr_xy_z : Z ‚ü∂ PXY_Z}
  {PX_YZ : C} {inl_x_yz : X ‚ü∂ PX_YZ} {inr_x_yz : PYZ ‚ü∂ PX_YZ}
  (coprod_xy : IsBinaryCoproduct inl_xy inr_xy)
  (coprod_yz : IsBinaryCoproduct inl_yz inr_yz)
  (coprod_xy_z : IsBinaryCoproduct inl_xy_z inr_xy_z)
  (coprod_x_yz : IsBinaryCoproduct inl_x_yz inr_x_yz)
  : PXY_Z ‚âÖ PX_YZ
  := ‚ü®
    coprod_xy_z.desc (coprod_xy.desc inl_x_yz (inl_yz ‚â´ inr_x_yz)) (inr_yz ‚â´ inr_x_yz),
    coprod_x_yz.desc (inl_xy ‚â´ inl_xy_z) (coprod_yz.desc (inr_xy ‚â´ inl_xy_z) inr_xy_z),
    by simp [desc_comp],
    by simp [desc_comp]
  ‚ü©

theorem IsBinaryCoproduct.associator_hom_def
  {X Y PXY : C} {inl_xy : X ‚ü∂ PXY} {inr_xy : Y ‚ü∂ PXY}
  {Z PYZ : C} {inl_yz : Y ‚ü∂ PYZ} {inr_yz : Z ‚ü∂ PYZ}
  {PXY_Z : C} {inl_xy_z : PXY ‚ü∂ PXY_Z} {inr_xy_z : Z ‚ü∂ PXY_Z}
  {PX_YZ : C} {inl_x_yz : X ‚ü∂ PX_YZ} {inr_x_yz : PYZ ‚ü∂ PX_YZ}
  (coprod_xy : IsBinaryCoproduct inl_xy inr_xy)
  (coprod_yz : IsBinaryCoproduct inl_yz inr_yz)
  (coprod_xy_z : IsBinaryCoproduct inl_xy_z inr_xy_z)
  (coprod_x_yz : IsBinaryCoproduct inl_x_yz inr_x_yz)
  : (coprod_xy.associator coprod_yz coprod_xy_z coprod_x_yz).hom
  = coprod_xy_z.desc (coprod_xy.desc inl_x_yz (inl_yz ‚â´ inr_x_yz)) (inr_yz ‚â´ inr_x_yz)
  := rfl

theorem IsBinaryCoproduct.associator_inv_def
  {X Y PXY : C} {inl_xy : X ‚ü∂ PXY} {inr_xy : Y ‚ü∂ PXY}
  {Z PYZ : C} {inl_yz : Y ‚ü∂ PYZ} {inr_yz : Z ‚ü∂ PYZ}
  {PXY_Z : C} {inl_xy_z : PXY ‚ü∂ PXY_Z} {inr_xy_z : Z ‚ü∂ PXY_Z}
  {PX_YZ : C} {inl_x_yz : X ‚ü∂ PX_YZ} {inr_x_yz : PYZ ‚ü∂ PX_YZ}
  (coprod_xy : IsBinaryCoproduct inl_xy inr_xy)
  (coprod_yz : IsBinaryCoproduct inl_yz inr_yz)
  (coprod_xy_z : IsBinaryCoproduct inl_xy_z inr_xy_z)
  (coprod_x_yz : IsBinaryCoproduct inl_x_yz inr_x_yz)
  : (coprod_xy.associator coprod_yz coprod_xy_z coprod_x_yz).inv
  = coprod_x_yz.desc (inl_xy ‚â´ inl_xy_z) (coprod_yz.desc (inr_xy ‚â´ inl_xy_z) inr_xy_z)
  := rfl

def IsBinaryCoproduct.leftUnitor
  {I X P : C} {inl : I ‚ü∂ P} {inr : X ‚ü∂ P}
  (initial : IsInitial I)
  (coprod : IsBinaryCoproduct inl inr)
  : P ‚âÖ X
  := ‚ü®
    coprod.desc (initial.to X) (ùüô X),
    inr,
    by apply coprod.eq_cases <;> simp; apply initial.hom_ext,
    by simp
  ‚ü©

theorem IsBinaryCoproduct.leftUnitor_hom_def
  {I X P : C} {inl : I ‚ü∂ P} {inr : X ‚ü∂ P}
  (initial : IsInitial I)
  (coprod : IsBinaryCoproduct inl inr)
  : (coprod.leftUnitor initial).hom = coprod.desc (initial.to X) (ùüô X)
  := rfl

theorem IsBinaryCoproduct.leftUnitor_inv_def
  {I X P : C} {inl : I ‚ü∂ P} {inr : X ‚ü∂ P}
  (initial : IsInitial I)
  (coprod : IsBinaryCoproduct inl inr)
  : (coprod.leftUnitor initial).inv = inr
  := rfl

def IsBinaryCoproduct.rightUnitor
  {X I P : C} {inl : X ‚ü∂ P} {inr : I ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (initial : IsInitial I)
  : P ‚âÖ X
  := ‚ü®
    coprod.desc (ùüô X) (initial.to X),
    inl,
    by apply coprod.eq_cases <;> simp; apply initial.hom_ext,
    by simp
  ‚ü©

theorem IsBinaryCoproduct.rightUnitor_hom_def
  {X I P : C} {inl : X ‚ü∂ P} {inr : I ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (initial : IsInitial I)
  : (coprod.rightUnitor initial).hom = coprod.desc (ùüô X) (initial.to X)
  := rfl

theorem IsBinaryCoproduct.rightUnitor_inv_def
  {X I P : C} {inl : X ‚ü∂ P} {inr : I ‚ü∂ P}
  (coprod : IsBinaryCoproduct inl inr)
  (initial : IsInitial I)
  : (coprod.rightUnitor initial).inv = inl
  := rfl

def IsBinaryCoproduct.braiding
  {X Y P : C}
  {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {inl' : Y ‚ü∂ Q} {inr' : X ‚ü∂ Q}
  (coprod : IsBinaryCoproduct inl inr)
  (coprod' : IsBinaryCoproduct inl' inr')
  : P ‚âÖ Q
  := ‚ü®
    coprod.desc inr' inl',
    coprod'.desc inr inl,
    by simp [desc_comp],
    by simp [desc_comp]
  ‚ü©

theorem IsBinaryCoproduct.braiding_hom_def
  {X Y P : C}
  {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {inl' : Y ‚ü∂ Q} {inr' : X ‚ü∂ Q}
  (coprod : IsBinaryCoproduct inl inr)
  (coprod' : IsBinaryCoproduct inl' inr')
  : (coprod.braiding coprod').hom = coprod.desc inr' inl'
  := rfl

theorem IsBinaryCoproduct.braiding_inv_def
  {X Y P : C}
  {inl : X ‚ü∂ P} {inr : Y ‚ü∂ P}
  {inl' : Y ‚ü∂ Q} {inr' : X ‚ü∂ Q}
  (coprod : IsBinaryCoproduct inl inr)
  (coprod' : IsBinaryCoproduct inl' inr')
  : (coprod.braiding coprod').inv = coprod'.desc inr inl
  := rfl

class ChosenCoproducts (C : Type _) [Category C] extends AddMonoidalCategory C where
  inl : ‚àÄ {X Y : C}, X ‚ü∂ X +‚Çí Y
  inr : ‚àÄ {X Y : C}, Y ‚ü∂ X +‚Çí Y
  coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr
  initial : IsInitial (ùüò_ C)
  addHom_canonical {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') : f +‚Çï g = coprod.map inl inr f g
  addAssoc_canonical {X Y Z : C} : Œ±‚Å∫ X Y Z = coprod.associator coprod coprod coprod
  leftZero_canonical {X : C} : Œª‚Å∫ X = coprod.leftUnitor initial
  rightZero_canonical {X : C} : œÅ‚Å∫ X = coprod.rightUnitor initial
  addSymm_canonical {X Y : C} : œÉ‚Å∫ X Y = coprod.braiding coprod

def monoidalOfBinaryCoproducts
  (addObj : C ‚Üí C ‚Üí C)
  (initialObj : C)
  (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
  (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
  (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
  (initial : IsInitial initialObj)
  : MonoidalCategory C where
  tensorObj := addObj
  tensorUnit := initialObj
  tensorHom := coprod.map inl inr
  whiskerLeft Z X Y f := coprod.map inl inr (ùüô Z) f
  whiskerRight f Z := coprod.map inl inr f (ùüô Z)
  associator _ _ _ := coprod.associator coprod coprod coprod
  leftUnitor _ := coprod.leftUnitor initial
  rightUnitor _ := coprod.rightUnitor initial
  tensorHom_def _ _ := by simp [IsBinaryCoproduct.map_comp]
  tensor_id _ _ := by simp
  tensor_comp _ _ _ _ := by simp [IsBinaryCoproduct.map_comp]
  whiskerLeft_id _ _ := by simp
  id_whiskerRight _ _ := by simp
  associator_naturality _ _ _ := by simp [
    IsBinaryCoproduct.associator_hom_def,
    IsBinaryCoproduct.map_eq_desc,
    IsBinaryCoproduct.desc_comp]
  leftUnitor_naturality := by simp [
    IsBinaryCoproduct.leftUnitor_hom_def,
    IsBinaryCoproduct.map_eq_desc,
    IsBinaryCoproduct.desc_comp]
  rightUnitor_naturality := by simp [
    IsBinaryCoproduct.rightUnitor_hom_def,
    IsBinaryCoproduct.map_eq_desc,
    IsBinaryCoproduct.desc_comp]
  pentagon := by simp [
    IsBinaryCoproduct.associator_hom_def,
    IsBinaryCoproduct.map_eq_desc,
    IsBinaryCoproduct.desc_comp]
  triangle := by simp [
    IsBinaryCoproduct.associator_hom_def,
    IsBinaryCoproduct.leftUnitor_hom_def,
    IsBinaryCoproduct.rightUnitor_hom_def,
    IsBinaryCoproduct.map_eq_desc,
    IsBinaryCoproduct.desc_comp]

def symmetricOfBinaryCoproducts
  (addObj : C ‚Üí C ‚Üí C)
  (initialObj : C)
  (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
  (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
  (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
  (initial : IsInitial initialObj) :
    let _ := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial;
    SymmetricCategory C
  := let _ := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial; {
    braiding := Œª _ _ => coprod.braiding coprod
    braiding_naturality_right := by simp [
      monoidalOfBinaryCoproducts,
      IsBinaryCoproduct.braiding_hom_def,
      IsBinaryCoproduct.map_eq_desc,
      IsBinaryCoproduct.desc_comp]
    braiding_naturality_left := by simp [
      monoidalOfBinaryCoproducts,
      IsBinaryCoproduct.braiding_hom_def,
      IsBinaryCoproduct.map_eq_desc,
      IsBinaryCoproduct.desc_comp]
    hexagon_forward := by simp [
      monoidalOfBinaryCoproducts,
      IsBinaryCoproduct.associator_hom_def,
      IsBinaryCoproduct.braiding_hom_def,
      IsBinaryCoproduct.map_eq_desc,
      IsBinaryCoproduct.desc_comp]
    hexagon_reverse := by simp [
      monoidalOfBinaryCoproducts,
      IsBinaryCoproduct.associator_inv_def,
      IsBinaryCoproduct.braiding_hom_def,
      IsBinaryCoproduct.map_eq_desc,
      IsBinaryCoproduct.desc_comp]
    symmetry := by simp [
      monoidalOfBinaryCoproducts,
      IsBinaryCoproduct.braiding_hom_def,
      IsBinaryCoproduct.map_eq_desc,
      IsBinaryCoproduct.desc_comp]
  }

def ChosenCoproducts.mk'
  (addObj : C ‚Üí C ‚Üí C)
  (initialObj : C)
  (inl : ‚àÄ {X Y : C}, X ‚ü∂ addObj X Y)
  (inr : ‚àÄ {X Y : C}, Y ‚ü∂ addObj X Y)
  (coprod : ‚àÄ{X Y : C}, IsBinaryCoproduct (X := X) (Y := Y) inl inr)
  (initial : IsInitial initialObj) : ChosenCoproducts C where
  addMonoidal := monoidalOfBinaryCoproducts addObj initialObj inl inr coprod initial
  addSymmetric := symmetricOfBinaryCoproducts addObj initialObj inl inr coprod initial
  inl := inl
  inr := inr
  coprod := coprod
  initial := initial
  addHom_canonical _ _ := rfl
  addAssoc_canonical := rfl
  leftZero_canonical := rfl
  rightZero_canonical := rfl
  addSymm_canonical := rfl

namespace ChosenCoproducts

variable [ChosenCoproducts C]

abbrev zero (X : C) : ùüò_ C ‚ü∂ X := ChosenCoproducts.initial.to X

theorem zero_initial {X Y : C} (f : X ‚ü∂ Y) : zero X ‚â´ f = zero Y := by simp

abbrev desc {W X Y : C} (f : X ‚ü∂ W) (g : Y ‚ü∂ W) : X +‚Çí Y ‚ü∂ W := ChosenCoproducts.coprod.desc f g

theorem desc_comp {W X Y Z : C} (f : X ‚ü∂ W) (g : Y ‚ü∂ W) (h : W ‚ü∂ Z)
  : desc f g ‚â´ h = desc (f ‚â´ h) (g ‚â´ h) := ChosenCoproducts.coprod.desc_comp f g h

theorem inl_desc {W X Y : C} (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inl ‚â´ desc f g = f := ChosenCoproducts.coprod.inl_desc f g

theorem inr_desc {W X Y : C} (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : inr ‚â´ desc f g = g := ChosenCoproducts.coprod.inr_desc f g

@[simp]
theorem inl_map {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  : inl ‚â´ (f +‚Çï g) = f ‚â´ inl := by simp [addHom_canonical]

@[simp]
theorem inr_map {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  : inr ‚â´ (f +‚Çï g) = g ‚â´ inr := by simp [addHom_canonical]

theorem map_comp_desc {X Y X' Y' W : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y') (g : Y ‚ü∂ W) (g' : Y' ‚ü∂ W)
  : (f +‚Çï f') ‚â´ desc g g' = desc (f ‚â´ g) (f' ‚â´ g')
  := by simp [addHom_canonical, IsBinaryCoproduct.map_comp_desc]

theorem map_eq_desc {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y')
  : f +‚Çï g = desc (f ‚â´ inl) (g ‚â´ inr) := by simp [addHom_canonical, IsBinaryCoproduct.map_eq_desc]

theorem addHom_def {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y')
  : f +‚Çï g = desc (f ‚â´ inl) (g ‚â´ inr) := by simp [addHom_canonical, IsBinaryCoproduct.map_eq_desc]

theorem addLeft_def {X Y Z : C} (f : X ‚ü∂ Y)
  : f ‚ñ∑‚Å∫ Z = desc (f ‚â´ inl) inr := by simp [<-addHom_id_left, addHom_def]

theorem addRight_def {X Y Z : C} (f : Y ‚ü∂ Z)
  : X ‚óÅ‚Å∫ f = desc inl (f ‚â´ inr) := by simp [<-addHom_id_right, addHom_def]

theorem addLeft_comp_desc {X Y X' W : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ W) (g' : X' ‚ü∂ W)
  : (f ‚ñ∑‚Å∫ X') ‚â´ desc g g' = desc (f ‚â´ g) g' := by simp [addLeft_def, desc_comp]

theorem addRight_comp_desc {X X' Y' W : C} (f' : X' ‚ü∂ Y') (g : X ‚ü∂ W) (g' : Y' ‚ü∂ W)
  : (X ‚óÅ‚Å∫ f') ‚â´ desc g g' = desc g (f' ‚â´ g') := by simp [addRight_def, desc_comp]

theorem addAssoc_hom_def {X Y Z : C} : (Œ±‚Å∫ X Y Z).hom = desc (desc inl (inl ‚â´ inr)) (inr ‚â´ inr)
  := by rw [addAssoc_canonical]; rfl

theorem addAssoc_inv_def {X Y Z : C} : (Œ±‚Å∫ X Y Z).inv = desc (inl ‚â´ inl) (desc (inr ‚â´ inl) inr)
  := by rw [addAssoc_canonical]; rfl

theorem leftZero_hom_def {X : C} : (Œª‚Å∫ X).hom = desc (zero X) (ùüô X)
  := by rw [leftZero_canonical]; rfl

theorem leftZero_inv_def {X : C} : (Œª‚Å∫ X).inv = inr
  := by rw [leftZero_canonical]; rfl

theorem rightZero_hom_def {X : C} : (œÅ‚Å∫ X).hom = desc (ùüô X) (zero X)
  := by rw [rightZero_canonical]; rfl

theorem rightZero_inv_def {X : C} : (œÅ‚Å∫ X).inv = inl
  := by rw [rightZero_canonical]; rfl

theorem addSymm_hom_def {X Y : C} : (œÉ‚Å∫ X Y).hom = desc inr inl
  := by rw [addSymm_canonical]; rfl

theorem addSymm_inv_def {X Y : C} : (œÉ‚Å∫ X Y).inv = desc inr inl
  := by rw [addSymm_canonical]; rfl

theorem addSymm_desc {W X Y : C} (f : X ‚ü∂ W) (g : Y ‚ü∂ W)
  : (œÉ‚Å∫ X Y).hom ‚â´ desc g f = desc f g := by simp [addSymm_hom_def, desc_comp]

-- join is a commutative monoid on each object X ‚àà C

abbrev join (X : C) : X +‚Çí X ‚ü∂ X := desc (ùüô X) (ùüô X)

theorem map_comp_join {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
  : (f +‚Çï g) ‚â´ join Z = desc f g := by simp [map_comp_desc]

theorem addLeft_comp_join {X Y : C} (f : X ‚ü∂ Y)
  : f ‚ñ∑‚Å∫ Y ‚â´ join Y = desc f (ùüô Y) := by simp [addLeft_comp_desc]

theorem addRight_comp_join {X Y : C} (f : X ‚ü∂ Y)
  : Y ‚óÅ‚Å∫ f ‚â´ join Y = desc (ùüô Y) f := by simp [addRight_comp_desc]

@[simp]
theorem join_zero_left {X : C} : zero X ‚ñ∑‚Å∫ X ‚â´ join X = (Œª‚Å∫ X).hom
  := by simp [addLeft_comp_join, leftZero_hom_def]

@[simp]
theorem join_zero_right {X : C} : X ‚óÅ‚Å∫ zero X ‚â´ join X = (œÅ‚Å∫ X).hom
  := by simp [addRight_comp_join, rightZero_hom_def]

theorem addSymm_hom_join {X : C} : (œÉ‚Å∫ X X).hom ‚â´ join X = join X
  := by simp [addSymm_hom_def, desc_comp]

theorem addSymm_inv_join {X : C} : (œÉ‚Å∫ X X).inv ‚â´ join X = join X
  := by simp [addSymm_inv_def, desc_comp]

theorem addAssoc_hom_join {X : C} : (Œ±‚Å∫ X X X).hom ‚â´ X ‚óÅ‚Å∫ join X ‚â´ join X = join X ‚ñ∑‚Å∫ X ‚â´ join X
  := by simp [addAssoc_hom_def, addLeft_def, addRight_def, desc_comp]

theorem addAssoc_inv_join {X : C} : (Œ±‚Å∫ X X X).inv ‚â´ join X ‚ñ∑‚Å∫ X ‚â´ join X = X ‚óÅ‚Å∫ join X ‚â´ join X
  := by simp [addAssoc_inv_def, addLeft_def, addRight_def, desc_comp]

-- TODO: join is a commutative monoid supply on C; want addSwap_inner ...

theorem join_zero : join (ùüò_ C) = (Œª‚Å∫ _).hom := by simp [leftZero_hom_def]

end ChosenCoproducts
