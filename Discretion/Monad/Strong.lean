import Mathlib.CategoryTheory.Monad.Basic
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Types.Basic

import Discretion.Monad.Commutative

namespace CategoryTheory

variable {C : Type u} [Category C] [MonoidalCategoryStruct C]

open MonoidalCategory

class LeftStrength (T : Monad C) where
  leftStrength : ‚àÄ(X Y : C), X ‚äó (T.obj Y) ‚ü∂ T.obj (X ‚äó Y)
  leftStrength_naturality : ‚àÄ(X Y X' Y' : C) (f : X ‚ü∂ X') (g : Y ‚ü∂ Y'),
    (f ‚äó (T.map g)) ‚â´ leftStrength X' Y' = leftStrength X Y ‚â´ T.map (f ‚äó g)
  leftUnitor_leftStrength : ‚àÄ(X : C),
    (Œª_ (T.obj X)).inv ‚â´ leftStrength (ùüô_ C) X = T.map (Œª_ X).inv
  leftStrength_associator : ‚àÄ(X Y Z : C),
    leftStrength (X ‚äó Y) Z ‚â´ T.map (Œ±_ X Y Z).hom
      = (Œ±_ X Y (T.obj Z)).hom ‚â´ X ‚óÅ leftStrength Y Z ‚â´ leftStrength X (Y ‚äó Z)
  Œ∑_leftStrength : ‚àÄ(X Y : C), X ‚óÅ T.Œ∑.app Y ‚â´ leftStrength X Y = T.Œ∑.app (X ‚äó Y)
  Œº_leftStrength : ‚àÄ(X Y : C),
    X ‚óÅ T.Œº.app Y ‚â´ leftStrength X Y
      = leftStrength X (T.obj Y) ‚â´ T.map (leftStrength X Y) ‚â´ T.Œº.app (X ‚äó Y)

attribute [reassoc] LeftStrength.leftStrength_naturality
attribute [reassoc] LeftStrength.leftUnitor_leftStrength
attribute [reassoc] LeftStrength.leftStrength_associator
attribute [reassoc] LeftStrength.Œ∑_leftStrength
attribute [reassoc] LeftStrength.Œº_leftStrength

class RightStrength (T : Monad C) where
  rightStrength : ‚àÄ(X Y : C), T.obj X ‚äó Y ‚ü∂ T.obj (X ‚äó Y)
  rightStrength_naturality : ‚àÄ(X Y X' Y' : C) (f : X ‚ü∂ X') (g : Y ‚ü∂ Y'),
    ((T.map f) ‚äó g) ‚â´ rightStrength X' Y' = rightStrength X Y ‚â´ T.map (f ‚äó g)
  rightUnitor_rightStrength : ‚àÄ(X : C),
    (œÅ_ (T.obj X)).inv ‚â´ rightStrength X (ùüô_ C) = T.map (œÅ_ X).inv
  rightStrength_associator : ‚àÄ(X Y Z : C),
    rightStrength X (Y ‚äó Z) ‚â´ T.map (Œ±_ X Y Z).inv
      = (Œ±_ (T.obj X) Y Z).inv ‚â´ rightStrength X Y ‚ñ∑ Z ‚â´ rightStrength (X ‚äó Y) Z
  Œ∑_rightStrength : ‚àÄ(X Y : C), T.Œ∑.app X ‚ñ∑ Y ‚â´ rightStrength X Y = T.Œ∑.app (X ‚äó Y)
  Œº_rightStrength : ‚àÄ(X Y : C),
    T.Œº.app X ‚ñ∑ Y ‚â´ rightStrength X Y
      = rightStrength (T.obj X) Y ‚â´ T.map (rightStrength X Y) ‚â´ T.Œº.app (X ‚äó Y)

attribute [reassoc] RightStrength.rightStrength_naturality
attribute [reassoc] RightStrength.rightUnitor_rightStrength
attribute [reassoc] RightStrength.rightStrength_associator
attribute [reassoc] RightStrength.Œ∑_rightStrength
attribute [reassoc] RightStrength.Œº_rightStrength

class Strength (T : Monad C) extends LeftStrength T, RightStrength T where
  leftStrength_rightStrength : ‚àÄ(X Y Z : C),
    leftStrength X Y ‚ñ∑ Z ‚â´ rightStrength (X ‚äó Y) Z
      = (Œ±_ X (T.obj Y) Z).hom
      ‚â´ X ‚óÅ rightStrength Y Z
      ‚â´ leftStrength X (Y ‚äó Z)
      ‚â´ T.map (Œ±_ X Y Z).inv

attribute [reassoc] Strength.leftStrength_rightStrength

open LeftStrength RightStrength

@[reassoc]
theorem Strength.rightStrength_leftStrength {T : Monad C} [Strength T] (X Y Z : C) :
  X ‚óÅ rightStrength Y Z ‚â´ leftStrength X (Y ‚äó Z)
    = (Œ±_ X (T.obj Y) Z).inv ‚â´ leftStrength X Y ‚ñ∑ Z ‚â´ rightStrength _ Z ‚â´ T.map (Œ±_ X Y Z).hom
  := by simp [leftStrength_rightStrength_assoc]

--TODO: strength of left strength for symmetric

--TODO: strength of right strength for symmetric

--TODO: if symmetric, right strength is induced by braiding from left strength

--TODO: if symmetric, left strength is induced by braiding from right strength

instance Strength.ofType.{v} {T : Monad (Type v)} : Strength T where
  leftStrength _ _ | ‚ü®x, ty‚ü© => T.map (Œª y => (x, y)) ty
  leftStrength_naturality _ _ _ _ f g := by
    funext ‚ü®x, ty‚ü©; simp only [types_comp_apply, tensor_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-types_comp_apply (g := T.map _),
      <-T.map_comp, <-T.map_comp]
    rfl
  leftUnitor_leftStrength _ := rfl
  leftStrength_associator _ _ _ := by
    funext ‚ü®‚ü®x, y‚ü©, tz‚ü©; simp only [types_comp_apply, associator_hom_apply,
      whiskerLeft_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-types_comp_apply (g := T.map _),
      <-T.map_comp, <-T.map_comp]
    rfl
  Œ∑_leftStrength _ _ := by
    funext ‚ü®x, y‚ü©; simp only [Functor.id_obj, types_comp_apply, whiskerLeft_apply]
    rw [<-types_comp_apply (g := T.map _), <-T.Œ∑.naturality]
    rfl
  Œº_leftStrength _ _ := by
    funext ‚ü®x, tty‚ü©; simp only [Functor.comp_obj, types_comp_apply, whiskerLeft_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-T.Œº.naturality, <-types_comp_apply (g := T.map _),
      <-T.map_comp]
    rfl
  rightStrength _ _ | ‚ü®tx, y‚ü© => T.map (Œª x => (x, y)) tx
  rightStrength_naturality _ _ _ _ f g := by
    funext ‚ü®tx, y‚ü©; simp only [types_comp_apply, tensor_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-types_comp_apply (g := T.map _),
      <-T.map_comp, <-T.map_comp]
    rfl
  rightUnitor_rightStrength _ := rfl
  rightStrength_associator _ _ _ := by
    funext ‚ü®tx, ‚ü®ty, tz‚ü©‚ü©; simp only [types_comp_apply, associator_inv_apply,
      whiskerRight_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-types_comp_apply (g := T.map _),
      <-T.map_comp, <-T.map_comp]
    rfl
  Œ∑_rightStrength _ _ := by
    funext ‚ü®tx, y‚ü©; simp only [Functor.id_obj, types_comp_apply, whiskerRight_apply]
    rw [<-types_comp_apply (g := T.map _), <-T.Œ∑.naturality]
    rfl
  Œº_rightStrength _ _ := by
    funext ‚ü®tx, y‚ü©; simp only [Functor.comp_obj, types_comp_apply, whiskerRight_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-T.Œº.naturality, <-types_comp_apply (g := T.map _),
      <-T.map_comp]
    rfl
  leftStrength_rightStrength _ _ _ := by
    funext ‚ü®‚ü®x, ty‚ü©, z‚ü©; simp only [types_comp_apply, whiskerRight_apply,
      associator_hom_apply, whiskerLeft_apply]
    rw [
      <-types_comp_apply (g := T.map _), <-types_comp_apply (g := T.map _),
      <-T.map_comp, <-T.map_comp, <-types_comp_apply (g := T.map _),
      <-T.map_comp
    ]
    rfl

--GOAL: a strong monad on a monoidal category induces a premonoidal category

class CommutativeMonad (T : Monad C) extends Strength T where
  is_commutative : ‚àÄ(X Y : C),
    leftStrength (T.obj X) Y ‚â´ T.map (rightStrength X Y) ‚â´ T.Œº.app (X ‚äó Y)
      = rightStrength X (T.obj Y) ‚â´ T.map (leftStrength X Y) ‚â´ T.Œº.app (X ‚äó Y)

attribute [reassoc] CommutativeMonad.is_commutative

--TODO: commutative monads for `Set`

--GOAL: a commutative monad on a monoidal category induces another monoidal category

end CategoryTheory
