-- import Mathlib.CategoryTheory.Monoidal.Category
-- import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
-- import Mathlib.CategoryTheory.Limits.Shapes.Terminal

-- import Discretion.Premonoidal.Predicate.Basic
-- import Discretion.Premonoidal.Property.Braided

-- namespace CategoryTheory

-- open MonoidalCategory
-- open Limits
-- open MorphismProperty

-- namespace Monoidal

-- variable {C : Type _} [Category C] [MonoidalCategoryStruct C] [BraidedCategoryStruct C]

-- theorem TensorClosure.exists_braided {X Y : C} (h : TensorClosure SymmOps X Y)
--   : ‚àÉf : X ‚ü∂ Y, braided C f
--   := by induction h with
--   | refl => exact ‚ü®ùüô _, braided.id‚ü©
--   | tensor_right h I => exact ‚ü®I.choose ‚ñ∑ _, braided.whiskerRight I.choose_spec‚ü©
--   | tensor_left h I => exact ‚ü®_ ‚óÅ I.choose, braided.whiskerLeft I.choose_spec‚ü©
--   | trans h1 h2 I1 I2 => exact ‚ü®I1.choose ‚â´ I2.choose, braided.comp I1.choose_spec I2.choose_spec‚ü©
--   | base h => cases h with
--   | swap => exact ‚ü®œÉ_ _ _, braided.s (by constructor)‚ü©
--   | _ => exact ‚ü®_, braided.monoidalS (by constructor)‚ü©

-- theorem TensorClosure.of_braided {X Y : C} (f : X ‚ü∂ Y) (hf : braided C f)
--   : TensorClosure SymmOps X Y
--   := by induction hf using braided.induction' with
--   | comp => apply TensorClosure.trans <;> assumption
--   | _ => repeat first | assumption | constructor

-- theorem TensorClosure.exists_braided_iff {X Y : C}
--   : TensorClosure SymmOps X Y ‚Üî ‚àÉf : X ‚ü∂ Y, braided C f
--   := ‚ü®TensorClosure.exists_braided, Œª‚ü®f, hf‚ü© => of_braided f hf‚ü©

-- end Monoidal
