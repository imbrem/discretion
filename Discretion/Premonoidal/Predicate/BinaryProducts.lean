import Discretion.Premonoidal.Property.Basic
import Discretion.Premonoidal.Property.Braided
import Discretion.ChosenFiniteCoproducts

namespace CategoryTheory

open MonoidalCategory
open MorphismProperty
open ChosenFiniteCoproducts

variable {C : Type _} [Category C]

section Product

variable [ChosenFiniteProducts C]

class CartesianPredicate (P : C ‚Üí Prop) : Prop where
  prop_terminal : P (ùüô_ C) := by aesop_cat
  prop_prod : ‚àÄ {X Y}, P X ‚Üí P Y ‚Üí P (X ‚äó Y) := by aesop_cat

class StrongCartesianPredicate (P : C ‚Üí Prop) extends CartesianPredicate P : Prop where
  prop_prod_left : ‚àÄ {X Y}, P (X ‚äó Y) ‚Üí P X := by aesop_cat
  prop_prod_right : ‚àÄ {X Y}, P (X ‚äó Y) ‚Üí P Y := by aesop_cat

instance StrongCartesianPredicate.instTop : StrongCartesianPredicate (‚ä§ : C ‚Üí Prop) where
  prop_terminal := trivial
  prop_prod _ _ := trivial
  prop_prod_left _ := trivial
  prop_prod_right _ := trivial

end Product

section Coproduct

variable [ChosenFiniteCoproducts C]

class CoCartesianPredicate (P : C ‚Üí Prop) : Prop where
  prop_initial : P (ùüò_ C) := by aesop_cat
  prop_coprod : ‚àÄ {X Y}, P X ‚Üí P Y ‚Üí P (X ‚äï‚Çí Y) := by aesop_cat

class StrongCoCartesianPredicate (P : C ‚Üí Prop) extends CoCartesianPredicate P : Prop where
  prop_coprod_left : ‚àÄ {X Y}, P (X ‚äï‚Çí Y) ‚Üí P X := by aesop_cat
  prop_coprod_right : ‚àÄ {X Y}, P (X ‚äï‚Çí Y) ‚Üí P Y := by aesop_cat

instance StrongCoCartesianPredicate.instTop : StrongCoCartesianPredicate (‚ä§ : C ‚Üí Prop) where
  prop_initial := trivial
  prop_coprod _ _ := trivial
  prop_coprod_left _ := trivial
  prop_coprod_right _ := trivial

end Coproduct

namespace Monoidal

-- section Product

-- theorem prop_terminal {P : C ‚Üí Prop} [CartesianPredicate P] [HasTerminal C] : P (‚ä§_ C)
--   := CartesianPredicate.prop_terminal

-- theorem prop_prod {P : C ‚Üí Prop} [CartesianPredicate P] {X Y : C} [HasBinaryProduct X Y]
--   : P X ‚Üí P Y ‚Üí P (X ‚®Ø Y) := CartesianPredicate.prop_prod

-- theorem prop_prod_left {P : C ‚Üí Prop} [StrongCartesianPredicate P] {X Y : C} [HasBinaryProduct X Y]
--   : P (X ‚®Ø Y) ‚Üí P X := StrongCartesianPredicate.prop_prod_left

-- theorem prop_prod_right {P : C ‚Üí Prop} [StrongCartesianPredicate P] {X Y : C} [HasBinaryProduct X Y]
--   : P (X ‚®Ø Y) ‚Üí P Y := StrongCartesianPredicate.prop_prod_right

-- theorem prop_prod_iff {P : C ‚Üí Prop} [StrongCartesianPredicate P] {X Y : C} [HasBinaryProduct X Y]
--   : P (X ‚®Ø Y) ‚Üî P X ‚àß P Y
--   := ‚ü®Œªh => ‚ü®prop_prod_left h, prop_prod_right h‚ü©, Œª‚ü®h1, h2‚ü© => prop_prod h1 h2‚ü©

-- theorem prop_initial {P : C ‚Üí Prop} [CoCartesianPredicate P] [HasInitial C] : P (‚ä•_ C)
--   := CoCartesianPredicate.prop_initial

-- theorem prop_coprod {P : C ‚Üí Prop} [CoCartesianPredicate P] {X Y : C} [HasBinaryCoproduct X Y]
--   : P X ‚Üí P Y ‚Üí P (X ‚®ø Y) := CoCartesianPredicate.prop_coprod

-- theorem prop_coprod_left {P : C ‚Üí Prop} [StrongCoCartesianPredicate P]
--   {X Y : C} [HasBinaryCoproduct X Y]
--   : P (X ‚®ø Y) ‚Üí P X := StrongCoCartesianPredicate.prop_coprod_left

-- theorem prop_coprod_right {P : C ‚Üí Prop} [StrongCoCartesianPredicate P]
--   {X Y : C} [HasBinaryCoproduct X Y]
--   : P (X ‚®ø Y) ‚Üí P Y := StrongCoCartesianPredicate.prop_coprod_right

-- theorem prop_coprod_iff {P : C ‚Üí Prop} [StrongCoCartesianPredicate P]
--   {X Y : C} [HasBinaryCoproduct X Y]
--   : P (X ‚®ø Y) ‚Üî P X ‚àß P Y
--   := ‚ü®Œªh => ‚ü®prop_coprod_left h, prop_coprod_right h‚ü©, Œª‚ü®h1, h2‚ü© => prop_coprod h1 h2‚ü©

-- end Monoidal

open Monoidal

-- instance CartesianPredicate.inf {P Q : C ‚Üí Prop} [CartesianPredicate P] [CartesianPredicate Q]
--   : CartesianPredicate (P ‚äì Q) where
--   prop_terminal := ‚ü®prop_terminal, prop_terminal‚ü©
--   prop_prod h1 h2 := ‚ü®prop_prod h1.1 h2.1, prop_prod h1.2 h2.2‚ü©

-- instance StrongCartesianPredicate.inf {P Q : C ‚Üí Prop}
--   [StrongCartesianPredicate P] [StrongCartesianPredicate Q]
--   : StrongCartesianPredicate (P ‚äì Q) where
--   prop_prod_left h := ‚ü®prop_prod_left h.1, prop_prod_left h.2‚ü©
--   prop_prod_right h := ‚ü®prop_prod_right h.1, prop_prod_right h.2‚ü©

-- instance CoCartesianPredicate.inf {P Q : C ‚Üí Prop} [CoCartesianPredicate P] [CoCartesianPredicate Q]
--   : CoCartesianPredicate (P ‚äì Q) where
--   prop_initial := ‚ü®prop_initial, prop_initial‚ü©
--   prop_coprod h1 h2 := ‚ü®prop_coprod h1.1 h2.1, prop_coprod h1.2 h2.2‚ü©

-- instance StrongCoCartesianPredicate.inf {P Q : C ‚Üí Prop}
--   [StrongCoCartesianPredicate P] [StrongCoCartesianPredicate Q]
--   : StrongCoCartesianPredicate (P ‚äì Q) where
--   prop_coprod_left h := ‚ü®prop_coprod_left h.1, prop_coprod_left h.2‚ü©
--   prop_coprod_right h := ‚ü®prop_coprod_right h.1, prop_coprod_right h.2‚ü©
