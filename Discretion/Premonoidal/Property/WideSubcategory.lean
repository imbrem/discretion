import Discretion.Premonoidal.Property.Basic
import Discretion.Premonoidal.Property.Braided
import Mathlib.CategoryTheory.Widesubcategory

namespace CategoryTheory

variable {C : Type u} [Category C]

@[ext]
theorem WideSubcategory.hom_ext {W : MorphismProperty C} [W.IsMultiplicative]
  {X Y : WideSubcategory W} (f g : X ‚ü∂ Y)
  (h : f.val = g.val) : f = g := by cases f; cases g; cases h; rfl

variable [MonoidalCategoryStruct C] [IsPremonoidal C]

open MonoidalCategory

open Monoidal

open MorphismProperty

instance WideSubcategory.monoidalCategoryStruct (W : MorphismProperty C) [W.IsMonoidal]
  : MonoidalCategoryStruct (WideSubcategory W) where
  tensorObj X Y := ‚ü®X.obj ‚äó Y.obj‚ü©
  whiskerLeft Z X Y f := ‚ü®Z.obj ‚óÅ f.val, whiskerLeft_mem f.prop‚ü©
  whiskerRight f Z := ‚ü®f.val ‚ñ∑ Z.obj, whiskerRight_mem f.prop‚ü©
  tensorHom f g := ‚ü®f.val ‚äó g.val, tensorHom_mem f.prop g.prop‚ü©
  tensorUnit := ‚ü®ùüô_ C‚ü©
  associator X Y Z := ‚ü®
      ‚ü®(Œ±_ _ _ _).hom, associator_hom_mem‚ü©, ‚ü®(Œ±_ _ _ _).inv, associator_inv_mem‚ü©,
      by ext; simp, by ext; simp
    ‚ü©
  leftUnitor X := ‚ü®
      ‚ü®(Œª_ _).hom, leftUnitor_hom_mem‚ü©, ‚ü®(Œª_ _).inv, leftUnitor_inv_mem‚ü©,
      by ext; simp, by ext; simp
    ‚ü©
  rightUnitor X := ‚ü®
      ‚ü®(œÅ_ _).hom, rightUnitor_hom_mem‚ü©, ‚ü®(œÅ_ _).inv, rightUnitor_inv_mem‚ü©,
      by ext; simp, by ext; simp
    ‚ü©

-- TODO: WideSubcategory is in and of itself monoidal

-- TODO: WideSubcategory also inherits braidedness
